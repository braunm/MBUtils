// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// invlogit
Rcpp::NumericVector invlogit(const NumericVector& X);
RcppExport SEXP _mbutils_invlogit(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(invlogit(X));
    return rcpp_result_gen;
END_RCPP
}
// log1pmx
Rcpp::NumericVector log1pmx(const NumericVector& X);
RcppExport SEXP _mbutils_log1pmx(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(log1pmx(X));
    return rcpp_result_gen;
END_RCPP
}
// loginvlogit
Rcpp::NumericVector loginvlogit(const NumericVector& X);
RcppExport SEXP _mbutils_loginvlogit(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(loginvlogit(X));
    return rcpp_result_gen;
END_RCPP
}
// log1pexp
Rcpp::NumericVector log1pexp(const NumericVector& X);
RcppExport SEXP _mbutils_log1pexp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(log1pexp(X));
    return rcpp_result_gen;
END_RCPP
}
// lgamma1p
Rcpp::NumericVector lgamma1p(const NumericVector& X);
RcppExport SEXP _mbutils_lgamma1p(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(lgamma1p(X));
    return rcpp_result_gen;
END_RCPP
}
// lgammaexp
Rcpp::NumericVector lgammaexp(const NumericVector& X);
RcppExport SEXP _mbutils_lgammaexp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(lgammaexp(X));
    return rcpp_result_gen;
END_RCPP
}
// erf
Rcpp::NumericVector erf(const NumericVector& X);
RcppExport SEXP _mbutils_erf(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(erf(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mbutils_invlogit", (DL_FUNC) &_mbutils_invlogit, 1},
    {"_mbutils_log1pmx", (DL_FUNC) &_mbutils_log1pmx, 1},
    {"_mbutils_loginvlogit", (DL_FUNC) &_mbutils_loginvlogit, 1},
    {"_mbutils_log1pexp", (DL_FUNC) &_mbutils_log1pexp, 1},
    {"_mbutils_lgamma1p", (DL_FUNC) &_mbutils_lgamma1p, 1},
    {"_mbutils_lgammaexp", (DL_FUNC) &_mbutils_lgammaexp, 1},
    {"_mbutils_erf", (DL_FUNC) &_mbutils_erf, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_mbutils(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
